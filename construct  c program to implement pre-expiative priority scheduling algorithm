#include <stdio.h>
#include <stdbool.h>

struct Process {
    int pid;        // Process ID
    int burst;      // Burst Time
    int arrival;    // Arrival Time
    int priority;   // Priority
    int remaining;  // Remaining Burst Time
    int completion; // Completion Time
    int waiting;    // Waiting Time
    int turnaround; // Turnaround Time
};

void preemptivePriorityScheduling(struct Process processes[], int n) {
    int currentTime = 0;
    int completed = 0;
    int prev = -1;

    while (completed != n) {
        int idx = -1;
        int highestPriority = 9999; // Assuming lower number means higher priority

        // Find the process with the highest priority that has arrived and has remaining burst time
        for (int i = 0; i < n; i++) {
            if (processes[i].arrival <= currentTime && processes[i].remaining > 0 && processes[i].priority < highestPriority) {
                highestPriority = processes[i].priority;
                idx = i;
            }
        }

        if (idx != -1) {
            // If the process is different from the previous one, print the context switch
            if (prev != idx) {
                printf("P%d | ", processes[idx].pid);
            }

            // Execute the process for 1 unit of time
            processes[idx].remaining--;
            currentTime++;

            // If the process is completed
            if (processes[idx].remaining == 0) {
                completed++;
                processes[idx].completion = currentTime;
                processes[idx].turnaround = processes[idx].completion - processes[idx].arrival;
                processes[idx].waiting = processes[idx].turnaround - processes[idx].burst;
            }

            prev = idx;
        } else {
            // If no process is available, increment time
            currentTime++;
        }
    }

    // Print the results
    printf("\n\nProcess ID\tBurst Time\tArrival Time\tPriority\tCompletion Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n",
               processes[i].pid, processes[i].burst, processes[i].arrival, processes[i].priority,
               processes[i].completion, processes[i].waiting, processes[i].turnaround);
    }
}

int main() {
    int n;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];

    for (int i = 0; i < n; i++) {
        printf("Enter details for process %d:\n", i + 1);
        processes[i].pid = i + 1;
        printf("Arrival Time: ");
        scanf("%d", &processes[i].arrival);
        printf("Burst Time: ");
        scanf("%d", &processes[i].burst);
        printf("Priority: ");
        scanf("%d", &processes[i].priority);
        processes[i].remaining = processes[i].burst;
    }

    preemptivePriorityScheduling(processes, n);

    return 0;
}
OUTPUT:Enter the number of processes: 3
Enter details for process 1:
Arrival Time: 0
Burst Time: 5
Priority: 2
Enter details for process 2:
Arrival Time: 1
Burst Time: 3
Priority: 1
Enter details for process 3:
Arrival Time: 2
Burst Time: 8
Priority: 3

P1 | P2 | P1 | P3 | P3 | P3 | P3 | P3 | P3 | P3 | 

Process ID    Burst Time    Arrival Time    Priority    Completion Time    Waiting Time    Turnaround Time
1             5             0               2           8                  3               8
2             3             1               1           4                  0               3
3             8             2               3           16                 6               14
